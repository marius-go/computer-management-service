// Code generated by go-swagger; DO NOT EDIT.

package computer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetComputerHandlerFunc turns a function with the right signature into a get computer handler
type GetComputerHandlerFunc func(GetComputerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetComputerHandlerFunc) Handle(params GetComputerParams) middleware.Responder {
	return fn(params)
}

// GetComputerHandler interface for that can handle valid get computer params
type GetComputerHandler interface {
	Handle(GetComputerParams) middleware.Responder
}

// NewGetComputer creates a new http.Handler for the get computer operation
func NewGetComputer(ctx *middleware.Context, handler GetComputerHandler) *GetComputer {
	return &GetComputer{Context: ctx, Handler: handler}
}

/*
	GetComputer swagger:route GET /computer/{computerName} computer getComputer

find computer by name
*/
type GetComputer struct {
	Context *middleware.Context
	Handler GetComputerHandler
}

func (o *GetComputer) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetComputerParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
